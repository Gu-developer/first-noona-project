배열(array)
같은 자료형 변수들의 나열된 묶음
같은 타입의 변수들의 관리를 편하게 하기 위해서 배열을 사용함

배열의 선언과 생성
1.타입 [] 배열명;
  배열명 = new 타입[길이];
2.배열의 생성과 초기화를 동시에 하는 방법
타입 [] 배열명= new 타입[길이];
길이=요소들의 개수

 ex))
int []arr = new int[4];

System.out.println(arr); 배열의 주소값

인덱스(index)- 배열의 요소들의 위치값(변수처럼 사용)
ex))
int [] ar = new int[3]
ar[0] = 10;
ar[1] = 20;
ar[2] = 30;
ㅁㅁㅁ
배열의 첫번째 시작은 0번부터 시작합니다.

//3명의 학생 점수를 지정하고 싶다. 100점, 80점, 70점
int score1=100;
int score2=80;
int score3=70;

System.out.println("1번째 학생의 점수:"+score1+"점");
System.out.println("2번째 학생의 점수:"+score2+"점");
System.out.println("3번째 학생의 점수:"+score3+"점");
번거로우니까 배열을 사용함

int scores [] = new int[3];
scores[0] = 100;
scores[1] = 80;
scores[2] = 70;

반복문을 사용해서도 가능

for(int i=0; i<3; i++){
 System.out.println(i+1+"번째 학생의 점수:" + scores[i] + "점");
}

인터페이스(interface)란?
inter(사이의)+face(마주하다)의 합성어로 물체들 사이에서 상호작용 할 수 있게 하는 중간 매개 역할

인터페이스 구현 방법
interface 인터페이스명();

클래스로 인터페이스 구현
interface 인터페이스명();{

}
class 클래스명 implements 인터페이스명{
추상 메소드 구현
};

인터페이스 멤버
상수: 타입 변수명 = 값;
추상 메소드

클래스 - 설계도
인터페이스 - 규격
클래스가 인터페이스의 규격에 따른다.




